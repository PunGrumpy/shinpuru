// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	backupmodels "github.com/zekroTJA/shinpuru/internal/services/backup/backupmodels"

	mock "github.com/stretchr/testify/mock"

	models "github.com/zekroTJA/shinpuru/internal/models"

	permissions "github.com/zekroTJA/shinpuru/pkg/permissions"

	snowflake "github.com/bwmarrin/snowflake"

	tag "github.com/zekroTJA/shinpuru/internal/util/tag"

	time "time"

	twitchnotify "github.com/zekroTJA/shinpuru/pkg/twitchnotify"

	vote "github.com/zekroTJA/shinpuru/internal/util/vote"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AddBackup provides a mock function with given fields: guildID, fileID
func (_m *Database) AddBackup(guildID string, fileID string) error {
	ret := _m.Called(guildID, fileID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGuildLogEntry provides a mock function with given fields: entry
func (_m *Database) AddGuildLogEntry(entry models.GuildLogEntry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.GuildLogEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddKarmaBlockList provides a mock function with given fields: guildID, userID
func (_m *Database) AddKarmaBlockList(guildID string, userID string) error {
	ret := _m.Called(guildID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOrUpdateKarmaRule provides a mock function with given fields: rule
func (_m *Database) AddOrUpdateKarmaRule(rule models.KarmaRule) error {
	ret := _m.Called(rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.KarmaRule) error); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddReport provides a mock function with given fields: rep
func (_m *Database) AddReport(rep models.Report) error {
	ret := _m.Called(rep)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Report) error); ok {
		r0 = rf(rep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoleSelects provides a mock function with given fields: v
func (_m *Database) AddRoleSelects(v []models.RoleSelect) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.RoleSelect) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTag provides a mock function with given fields: _a0
func (_m *Database) AddTag(_a0 tag.Tag) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(tag.Tag) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddToAntiraidJoinList provides a mock function with given fields: guildID, userID, userTag, accountCreated
func (_m *Database) AddToAntiraidJoinList(guildID string, userID string, userTag string, accountCreated time.Time) error {
	ret := _m.Called(guildID, userID, userTag, accountCreated)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, time.Time) error); ok {
		r0 = rf(guildID, userID, userTag, accountCreated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUnbanRequest provides a mock function with given fields: request
func (_m *Database) AddUnbanRequest(request models.UnbanRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.UnbanRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUpdateVote provides a mock function with given fields: votes
func (_m *Database) AddUpdateVote(votes vote.Vote) error {
	ret := _m.Called(votes)

	var r0 error
	if rf, ok := ret.Get(0).(func(vote.Vote) error); ok {
		r0 = rf(votes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddVerificationQueue provides a mock function with given fields: e
func (_m *Database) AddVerificationQueue(e models.VerificationQueueEntry) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.VerificationQueueEntry) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckKarmaRule provides a mock function with given fields: guildID, checksum
func (_m *Database) CheckKarmaRule(guildID string, checksum string) (bool, error) {
	ret := _m.Called(guildID, checksum)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(guildID, checksum)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CleanupExpiredRefreshTokens provides a mock function with given fields:
func (_m *Database) CleanupExpiredRefreshTokens() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Database) Close() {
	_m.Called()
}

// Connect provides a mock function with given fields: credentials
func (_m *Database) Connect(credentials ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, credentials...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(credentials...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAPIToken provides a mock function with given fields: userID
func (_m *Database) DeleteAPIToken(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBackup provides a mock function with given fields: guildID, fileID
func (_m *Database) DeleteBackup(guildID string, fileID string) error {
	ret := _m.Called(guildID, fileID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBirthday provides a mock function with given fields: guildID, userID
func (_m *Database) DeleteBirthday(guildID string, userID string) error {
	ret := _m.Called(guildID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLockChan provides a mock function with given fields: chanID
func (_m *Database) DeleteLockChan(chanID string) error {
	ret := _m.Called(chanID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(chanID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLogEntries provides a mock function with given fields: guildID
func (_m *Database) DeleteLogEntries(guildID string) error {
	ret := _m.Called(guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLogEntry provides a mock function with given fields: guildID, id
func (_m *Database) DeleteLogEntry(guildID string, id snowflake.ID) error {
	ret := _m.Called(guildID, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, snowflake.ID) error); ok {
		r0 = rf(guildID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReport provides a mock function with given fields: id
func (_m *Database) DeleteReport(id snowflake.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(snowflake.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: id
func (_m *Database) DeleteTag(id snowflake.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(snowflake.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTwitchNotify provides a mock function with given fields: twitchUserID, guildID
func (_m *Database) DeleteTwitchNotify(twitchUserID string, guildID string) error {
	ret := _m.Called(twitchUserID, guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(twitchUserID, guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVote provides a mock function with given fields: voteID
func (_m *Database) DeleteVote(voteID string) error {
	ret := _m.Called(voteID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(voteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditTag provides a mock function with given fields: _a0
func (_m *Database) EditTag(_a0 tag.Tag) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(tag.Tag) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpireReports provides a mock function with given fields: id
func (_m *Database) ExpireReports(id ...string) error {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(id...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushAntiraidJoinList provides a mock function with given fields: guildID
func (_m *Database) FlushAntiraidJoinList(guildID string) error {
	ret := _m.Called(guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushGuildData provides a mock function with given fields: guildID
func (_m *Database) FlushGuildData(guildID string) error {
	ret := _m.Called(guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushUserData provides a mock function with given fields: userID
func (_m *Database) FlushUserData(userID string) (map[string]int, error) {
	ret := _m.Called(userID)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(string) map[string]int); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushVerificationQueue provides a mock function with given fields: guildID
func (_m *Database) FlushVerificationQueue(guildID string) error {
	ret := _m.Called(guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAPIToken provides a mock function with given fields: userID
func (_m *Database) GetAPIToken(userID string) (models.APITokenEntry, error) {
	ret := _m.Called(userID)

	var r0 models.APITokenEntry
	if rf, ok := ret.Get(0).(func(string) models.APITokenEntry); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.APITokenEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTwitchNotifies provides a mock function with given fields: twitchUserID
func (_m *Database) GetAllTwitchNotifies(twitchUserID string) ([]twitchnotify.DBEntry, error) {
	ret := _m.Called(twitchUserID)

	var r0 []twitchnotify.DBEntry
	if rf, ok := ret.Get(0).(func(string) []twitchnotify.DBEntry); ok {
		r0 = rf(twitchUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]twitchnotify.DBEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(twitchUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAntiraidBurst provides a mock function with given fields: guildID
func (_m *Database) GetAntiraidBurst(guildID string) (int, error) {
	ret := _m.Called(guildID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAntiraidJoinList provides a mock function with given fields: guildID
func (_m *Database) GetAntiraidJoinList(guildID string) ([]models.JoinLogEntry, error) {
	ret := _m.Called(guildID)

	var r0 []models.JoinLogEntry
	if rf, ok := ret.Get(0).(func(string) []models.JoinLogEntry); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JoinLogEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAntiraidRegeneration provides a mock function with given fields: guildID
func (_m *Database) GetAntiraidRegeneration(guildID string) (int, error) {
	ret := _m.Called(guildID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAntiraidState provides a mock function with given fields: guildID
func (_m *Database) GetAntiraidState(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAntiraidVerification provides a mock function with given fields: guildID
func (_m *Database) GetAntiraidVerification(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackups provides a mock function with given fields: guildID
func (_m *Database) GetBackups(guildID string) ([]backupmodels.Entry, error) {
	ret := _m.Called(guildID)

	var r0 []backupmodels.Entry
	if rf, ok := ret.Get(0).(func(string) []backupmodels.Entry); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]backupmodels.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBirthdays provides a mock function with given fields: guildID
func (_m *Database) GetBirthdays(guildID string) ([]models.Birthday, error) {
	ret := _m.Called(guildID)

	var r0 []models.Birthday
	if rf, ok := ret.Get(0).(func(string) []models.Birthday); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Birthday)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpiredReports provides a mock function with given fields:
func (_m *Database) GetExpiredReports() ([]models.Report, error) {
	ret := _m.Called()

	var r0 []models.Report
	if rf, ok := ret.Get(0).(func() []models.Report); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Report)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildAPI provides a mock function with given fields: guildID
func (_m *Database) GetGuildAPI(guildID string) (models.GuildAPISettings, error) {
	ret := _m.Called(guildID)

	var r0 models.GuildAPISettings
	if rf, ok := ret.Get(0).(func(string) models.GuildAPISettings); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(models.GuildAPISettings)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildAutoRole provides a mock function with given fields: guildID
func (_m *Database) GetGuildAutoRole(guildID string) ([]string, error) {
	ret := _m.Called(guildID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildAutoVC provides a mock function with given fields: guildID
func (_m *Database) GetGuildAutoVC(guildID string) ([]string, error) {
	ret := _m.Called(guildID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildBackup provides a mock function with given fields: guildID
func (_m *Database) GetGuildBackup(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildBirthdayChan provides a mock function with given fields: guildID
func (_m *Database) GetGuildBirthdayChan(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildCodeExecEnabled provides a mock function with given fields: guildID
func (_m *Database) GetGuildCodeExecEnabled(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildColorReaction provides a mock function with given fields: guildID
func (_m *Database) GetGuildColorReaction(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildGhostpingMsg provides a mock function with given fields: guildID
func (_m *Database) GetGuildGhostpingMsg(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildInviteBlock provides a mock function with given fields: guildID
func (_m *Database) GetGuildInviteBlock(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildJdoodleKey provides a mock function with given fields: guildID
func (_m *Database) GetGuildJdoodleKey(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildJoinMsg provides a mock function with given fields: guildID
func (_m *Database) GetGuildJoinMsg(guildID string) (string, string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(guildID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGuildLeaveMsg provides a mock function with given fields: guildID
func (_m *Database) GetGuildLeaveMsg(guildID string) (string, string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(guildID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGuildLogDisable provides a mock function with given fields: guildID
func (_m *Database) GetGuildLogDisable(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildLogEntries provides a mock function with given fields: guildID, offset, limit, severity, ascending
func (_m *Database) GetGuildLogEntries(guildID string, offset int, limit int, severity models.GuildLogSeverity, ascending bool) ([]models.GuildLogEntry, error) {
	ret := _m.Called(guildID, offset, limit, severity, ascending)

	var r0 []models.GuildLogEntry
	if rf, ok := ret.Get(0).(func(string, int, int, models.GuildLogSeverity, bool) []models.GuildLogEntry); ok {
		r0 = rf(guildID, offset, limit, severity, ascending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GuildLogEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, models.GuildLogSeverity, bool) error); ok {
		r1 = rf(guildID, offset, limit, severity, ascending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildLogEntriesCount provides a mock function with given fields: guildID, severity
func (_m *Database) GetGuildLogEntriesCount(guildID string, severity models.GuildLogSeverity) (int, error) {
	ret := _m.Called(guildID, severity)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, models.GuildLogSeverity) int); ok {
		r0 = rf(guildID, severity)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.GuildLogSeverity) error); ok {
		r1 = rf(guildID, severity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildModLog provides a mock function with given fields: guildID
func (_m *Database) GetGuildModLog(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildNotifyRole provides a mock function with given fields: guildID
func (_m *Database) GetGuildNotifyRole(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildPermissions provides a mock function with given fields: guildID
func (_m *Database) GetGuildPermissions(guildID string) (map[string]permissions.PermissionArray, error) {
	ret := _m.Called(guildID)

	var r0 map[string]permissions.PermissionArray
	if rf, ok := ret.Get(0).(func(string) map[string]permissions.PermissionArray); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]permissions.PermissionArray)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildPrefix provides a mock function with given fields: guildID
func (_m *Database) GetGuildPrefix(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildTags provides a mock function with given fields: guildID
func (_m *Database) GetGuildTags(guildID string) ([]tag.Tag, error) {
	ret := _m.Called(guildID)

	var r0 []tag.Tag
	if rf, ok := ret.Get(0).(func(string) []tag.Tag); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tag.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildUnbanRequests provides a mock function with given fields: guildID
func (_m *Database) GetGuildUnbanRequests(guildID string) ([]models.UnbanRequest, error) {
	ret := _m.Called(guildID)

	var r0 []models.UnbanRequest
	if rf, ok := ret.Get(0).(func(string) []models.UnbanRequest); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UnbanRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildUserUnbanRequests provides a mock function with given fields: userID, guildID
func (_m *Database) GetGuildUserUnbanRequests(userID string, guildID string) ([]models.UnbanRequest, error) {
	ret := _m.Called(userID, guildID)

	var r0 []models.UnbanRequest
	if rf, ok := ret.Get(0).(func(string, string) []models.UnbanRequest); ok {
		r0 = rf(userID, guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UnbanRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildVerificationRequired provides a mock function with given fields: guildID
func (_m *Database) GetGuildVerificationRequired(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildVoiceLog provides a mock function with given fields: guildID
func (_m *Database) GetGuildVoiceLog(guildID string) (string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildVoiceLogIgnores provides a mock function with given fields: guildID
func (_m *Database) GetGuildVoiceLogIgnores(guildID string) ([]string, error) {
	ret := _m.Called(guildID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuilds provides a mock function with given fields:
func (_m *Database) GetGuilds() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarma provides a mock function with given fields: userID, guildID
func (_m *Database) GetKarma(userID string, guildID string) (int, error) {
	ret := _m.Called(userID, guildID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(userID, guildID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaBlockList provides a mock function with given fields: guildID
func (_m *Database) GetKarmaBlockList(guildID string) ([]string, error) {
	ret := _m.Called(guildID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaEmotes provides a mock function with given fields: guildID
func (_m *Database) GetKarmaEmotes(guildID string) (string, string, error) {
	ret := _m.Called(guildID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(guildID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetKarmaGuild provides a mock function with given fields: guildID, limit
func (_m *Database) GetKarmaGuild(guildID string, limit int) ([]models.GuildKarma, error) {
	ret := _m.Called(guildID, limit)

	var r0 []models.GuildKarma
	if rf, ok := ret.Get(0).(func(string, int) []models.GuildKarma); ok {
		r0 = rf(guildID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GuildKarma)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(guildID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaPenalty provides a mock function with given fields: guildID
func (_m *Database) GetKarmaPenalty(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaRules provides a mock function with given fields: guildID
func (_m *Database) GetKarmaRules(guildID string) ([]models.KarmaRule, error) {
	ret := _m.Called(guildID)

	var r0 []models.KarmaRule
	if rf, ok := ret.Get(0).(func(string) []models.KarmaRule); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.KarmaRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaState provides a mock function with given fields: guildID
func (_m *Database) GetKarmaState(guildID string) (bool, error) {
	ret := _m.Called(guildID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaSum provides a mock function with given fields: userID
func (_m *Database) GetKarmaSum(userID string) (int, error) {
	ret := _m.Called(userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKarmaTokens provides a mock function with given fields: guildID
func (_m *Database) GetKarmaTokens(guildID string) (int, error) {
	ret := _m.Called(guildID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLockChan provides a mock function with given fields: chanID
func (_m *Database) GetLockChan(chanID string) (string, string, string, error) {
	ret := _m.Called(chanID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(chanID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(chanID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(chanID)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(chanID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetLockChannels provides a mock function with given fields: guildID
func (_m *Database) GetLockChannels(guildID string) ([]string, error) {
	ret := _m.Called(guildID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReport provides a mock function with given fields: id
func (_m *Database) GetReport(id snowflake.ID) (models.Report, error) {
	ret := _m.Called(id)

	var r0 models.Report
	if rf, ok := ret.Get(0).(func(snowflake.ID) models.Report); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Report)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(snowflake.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportsFiltered provides a mock function with given fields: guildID, memberID, repType, offset, limit
func (_m *Database) GetReportsFiltered(guildID string, memberID string, repType int, offset int, limit int) ([]models.Report, error) {
	ret := _m.Called(guildID, memberID, repType, offset, limit)

	var r0 []models.Report
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) []models.Report); ok {
		r0 = rf(guildID, memberID, repType, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Report)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, int, int) error); ok {
		r1 = rf(guildID, memberID, repType, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportsFilteredCount provides a mock function with given fields: guildID, memberID, repType
func (_m *Database) GetReportsFilteredCount(guildID string, memberID string, repType int) (int, error) {
	ret := _m.Called(guildID, memberID, repType)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, int) int); ok {
		r0 = rf(guildID, memberID, repType)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(guildID, memberID, repType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportsGuild provides a mock function with given fields: guildID, offset, limit
func (_m *Database) GetReportsGuild(guildID string, offset int, limit int) ([]models.Report, error) {
	ret := _m.Called(guildID, offset, limit)

	var r0 []models.Report
	if rf, ok := ret.Get(0).(func(string, int, int) []models.Report); ok {
		r0 = rf(guildID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Report)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(guildID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportsGuildCount provides a mock function with given fields: guildID
func (_m *Database) GetReportsGuildCount(guildID string) (int, error) {
	ret := _m.Called(guildID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleSelects provides a mock function with given fields:
func (_m *Database) GetRoleSelects() ([]models.RoleSelect, error) {
	ret := _m.Called()

	var r0 []models.RoleSelect
	if rf, ok := ret.Get(0).(func() []models.RoleSelect); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RoleSelect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSetting provides a mock function with given fields: setting
func (_m *Database) GetSetting(setting string) (string, error) {
	ret := _m.Called(setting)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(setting)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(setting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStarboardConfig provides a mock function with given fields: guildID
func (_m *Database) GetStarboardConfig(guildID string) (models.StarboardConfig, error) {
	ret := _m.Called(guildID)

	var r0 models.StarboardConfig
	if rf, ok := ret.Get(0).(func(string) models.StarboardConfig); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Get(0).(models.StarboardConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStarboardEntries provides a mock function with given fields: guildID, sortBy, limit, offset
func (_m *Database) GetStarboardEntries(guildID string, sortBy models.StarboardSortBy, limit int, offset int) ([]models.StarboardEntry, error) {
	ret := _m.Called(guildID, sortBy, limit, offset)

	var r0 []models.StarboardEntry
	if rf, ok := ret.Get(0).(func(string, models.StarboardSortBy, int, int) []models.StarboardEntry); ok {
		r0 = rf(guildID, sortBy, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StarboardEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.StarboardSortBy, int, int) error); ok {
		r1 = rf(guildID, sortBy, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStarboardEntry provides a mock function with given fields: messageID
func (_m *Database) GetStarboardEntry(messageID string) (models.StarboardEntry, error) {
	ret := _m.Called(messageID)

	var r0 models.StarboardEntry
	if rf, ok := ret.Get(0).(func(string) models.StarboardEntry); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(models.StarboardEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagByID provides a mock function with given fields: id
func (_m *Database) GetTagByID(id snowflake.ID) (tag.Tag, error) {
	ret := _m.Called(id)

	var r0 tag.Tag
	if rf, ok := ret.Get(0).(func(snowflake.ID) tag.Tag); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(tag.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(snowflake.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagByIdent provides a mock function with given fields: ident, guildID
func (_m *Database) GetTagByIdent(ident string, guildID string) (tag.Tag, error) {
	ret := _m.Called(ident, guildID)

	var r0 tag.Tag
	if rf, ok := ret.Get(0).(func(string, string) tag.Tag); ok {
		r0 = rf(ident, guildID)
	} else {
		r0 = ret.Get(0).(tag.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ident, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTwitchNotify provides a mock function with given fields: twitchUserID, guildID
func (_m *Database) GetTwitchNotify(twitchUserID string, guildID string) (twitchnotify.DBEntry, error) {
	ret := _m.Called(twitchUserID, guildID)

	var r0 twitchnotify.DBEntry
	if rf, ok := ret.Get(0).(func(string, string) twitchnotify.DBEntry); ok {
		r0 = rf(twitchUserID, guildID)
	} else {
		r0 = ret.Get(0).(twitchnotify.DBEntry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(twitchUserID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnbanRequest provides a mock function with given fields: id
func (_m *Database) GetUnbanRequest(id string) (models.UnbanRequest, error) {
	ret := _m.Called(id)

	var r0 models.UnbanRequest
	if rf, ok := ret.Get(0).(func(string) models.UnbanRequest); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.UnbanRequest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByRefreshToken provides a mock function with given fields: token
func (_m *Database) GetUserByRefreshToken(token string) (string, time.Time, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(string) time.Time); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserOTAEnabled provides a mock function with given fields: userID
func (_m *Database) GetUserOTAEnabled(userID string) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStarboardOptout provides a mock function with given fields: userID
func (_m *Database) GetUserStarboardOptout(userID string) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserVerified provides a mock function with given fields: userID
func (_m *Database) GetUserVerified(userID string) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerificationQueue provides a mock function with given fields: guildID, userID
func (_m *Database) GetVerificationQueue(guildID string, userID string) ([]models.VerificationQueueEntry, error) {
	ret := _m.Called(guildID, userID)

	var r0 []models.VerificationQueueEntry
	if rf, ok := ret.Get(0).(func(string, string) []models.VerificationQueueEntry); ok {
		r0 = rf(guildID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.VerificationQueueEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVotes provides a mock function with given fields:
func (_m *Database) GetVotes() (map[string]vote.Vote, error) {
	ret := _m.Called()

	var r0 map[string]vote.Vote
	if rf, ok := ret.Get(0).(func() map[string]vote.Vote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]vote.Vote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsGuildVoiceLogIgnored provides a mock function with given fields: guildID, channelID
func (_m *Database) IsGuildVoiceLogIgnored(guildID string, channelID string) (bool, error) {
	ret := _m.Called(guildID, channelID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(guildID, channelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsKarmaBlockListed provides a mock function with given fields: guildID, userID
func (_m *Database) IsKarmaBlockListed(guildID string, userID string) (bool, error) {
	ret := _m.Called(guildID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAntiraidJoinList provides a mock function with given fields: guildID, userID
func (_m *Database) RemoveAntiraidJoinList(guildID string, userID string) error {
	ret := _m.Called(guildID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveGuildVoiceLogIgnore provides a mock function with given fields: guildID, channelID
func (_m *Database) RemoveGuildVoiceLogIgnore(guildID string, channelID string) error {
	ret := _m.Called(guildID, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveKarmaBlockList provides a mock function with given fields: guildID, userID
func (_m *Database) RemoveKarmaBlockList(guildID string, userID string) error {
	ret := _m.Called(guildID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveKarmaRule provides a mock function with given fields: guildID, id
func (_m *Database) RemoveKarmaRule(guildID string, id snowflake.ID) error {
	ret := _m.Called(guildID, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, snowflake.ID) error); ok {
		r0 = rf(guildID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoleSelect provides a mock function with given fields: guildID, channelID, messageID
func (_m *Database) RemoveRoleSelect(guildID string, channelID string, messageID string) error {
	ret := _m.Called(guildID, channelID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveStarboardEntry provides a mock function with given fields: msgID
func (_m *Database) RemoveStarboardEntry(msgID string) error {
	ret := _m.Called(msgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(msgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveVerificationQueue provides a mock function with given fields: guildID, userID
func (_m *Database) RemoveVerificationQueue(guildID string, userID string) (bool, error) {
	ret := _m.Called(guildID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeUserRefreshToken provides a mock function with given fields: userID
func (_m *Database) RevokeUserRefreshToken(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAPIToken provides a mock function with given fields: token
func (_m *Database) SetAPIToken(token models.APITokenEntry) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.APITokenEntry) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAntiraidBurst provides a mock function with given fields: guildID, burst
func (_m *Database) SetAntiraidBurst(guildID string, burst int) error {
	ret := _m.Called(guildID, burst)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(guildID, burst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAntiraidRegeneration provides a mock function with given fields: guildID, periodSecs
func (_m *Database) SetAntiraidRegeneration(guildID string, periodSecs int) error {
	ret := _m.Called(guildID, periodSecs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(guildID, periodSecs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAntiraidState provides a mock function with given fields: guildID, state
func (_m *Database) SetAntiraidState(guildID string, state bool) error {
	ret := _m.Called(guildID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAntiraidVerification provides a mock function with given fields: guildID, state
func (_m *Database) SetAntiraidVerification(guildID string, state bool) error {
	ret := _m.Called(guildID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBirthday provides a mock function with given fields: m
func (_m *Database) SetBirthday(m models.Birthday) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Birthday) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildAPI provides a mock function with given fields: guildID, settings
func (_m *Database) SetGuildAPI(guildID string, settings models.GuildAPISettings) error {
	ret := _m.Called(guildID, settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.GuildAPISettings) error); ok {
		r0 = rf(guildID, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildAutoRole provides a mock function with given fields: guildID, autoRoleIDs
func (_m *Database) SetGuildAutoRole(guildID string, autoRoleIDs []string) error {
	ret := _m.Called(guildID, autoRoleIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(guildID, autoRoleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildAutoVC provides a mock function with given fields: guildID, autoVCIDs
func (_m *Database) SetGuildAutoVC(guildID string, autoVCIDs []string) error {
	ret := _m.Called(guildID, autoVCIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(guildID, autoVCIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildBackup provides a mock function with given fields: guildID, enabled
func (_m *Database) SetGuildBackup(guildID string, enabled bool) error {
	ret := _m.Called(guildID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildBirthdayChan provides a mock function with given fields: guildID, chanID
func (_m *Database) SetGuildBirthdayChan(guildID string, chanID string) error {
	ret := _m.Called(guildID, chanID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, chanID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildCodeExecEnabled provides a mock function with given fields: guildID, enabled
func (_m *Database) SetGuildCodeExecEnabled(guildID string, enabled bool) error {
	ret := _m.Called(guildID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildColorReaction provides a mock function with given fields: guildID, enable
func (_m *Database) SetGuildColorReaction(guildID string, enable bool) error {
	ret := _m.Called(guildID, enable)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildGhostpingMsg provides a mock function with given fields: guildID, msg
func (_m *Database) SetGuildGhostpingMsg(guildID string, msg string) error {
	ret := _m.Called(guildID, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildInviteBlock provides a mock function with given fields: guildID, data
func (_m *Database) SetGuildInviteBlock(guildID string, data string) error {
	ret := _m.Called(guildID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildJdoodleKey provides a mock function with given fields: guildID, key
func (_m *Database) SetGuildJdoodleKey(guildID string, key string) error {
	ret := _m.Called(guildID, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildJoinMsg provides a mock function with given fields: guildID, channelID, msg
func (_m *Database) SetGuildJoinMsg(guildID string, channelID string, msg string) error {
	ret := _m.Called(guildID, channelID, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, channelID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildLeaveMsg provides a mock function with given fields: guildID, channelID, msg
func (_m *Database) SetGuildLeaveMsg(guildID string, channelID string, msg string) error {
	ret := _m.Called(guildID, channelID, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, channelID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildLogDisable provides a mock function with given fields: guildID, enabled
func (_m *Database) SetGuildLogDisable(guildID string, enabled bool) error {
	ret := _m.Called(guildID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildModLog provides a mock function with given fields: guildID, chanID
func (_m *Database) SetGuildModLog(guildID string, chanID string) error {
	ret := _m.Called(guildID, chanID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, chanID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildNotifyRole provides a mock function with given fields: guildID, roleID
func (_m *Database) SetGuildNotifyRole(guildID string, roleID string) error {
	ret := _m.Called(guildID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildPrefix provides a mock function with given fields: guildID, newPrefix
func (_m *Database) SetGuildPrefix(guildID string, newPrefix string) error {
	ret := _m.Called(guildID, newPrefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, newPrefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildRolePermission provides a mock function with given fields: guildID, roleID, p
func (_m *Database) SetGuildRolePermission(guildID string, roleID string, p permissions.PermissionArray) error {
	ret := _m.Called(guildID, roleID, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, permissions.PermissionArray) error); ok {
		r0 = rf(guildID, roleID, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildVerificationRequired provides a mock function with given fields: guildID, enable
func (_m *Database) SetGuildVerificationRequired(guildID string, enable bool) error {
	ret := _m.Called(guildID, enable)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildVoiceLog provides a mock function with given fields: guildID, chanID
func (_m *Database) SetGuildVoiceLog(guildID string, chanID string) error {
	ret := _m.Called(guildID, chanID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, chanID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildVoiceLogIngore provides a mock function with given fields: guildID, channelID
func (_m *Database) SetGuildVoiceLogIngore(guildID string, channelID string) error {
	ret := _m.Called(guildID, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKarma provides a mock function with given fields: userID, guildID, val
func (_m *Database) SetKarma(userID string, guildID string, val int) error {
	ret := _m.Called(userID, guildID, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(userID, guildID, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKarmaEmotes provides a mock function with given fields: guildID, emotesInc, emotesDec
func (_m *Database) SetKarmaEmotes(guildID string, emotesInc string, emotesDec string) error {
	ret := _m.Called(guildID, emotesInc, emotesDec)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, emotesInc, emotesDec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKarmaPenalty provides a mock function with given fields: guildID, state
func (_m *Database) SetKarmaPenalty(guildID string, state bool) error {
	ret := _m.Called(guildID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKarmaState provides a mock function with given fields: guildID, state
func (_m *Database) SetKarmaState(guildID string, state bool) error {
	ret := _m.Called(guildID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(guildID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKarmaTokens provides a mock function with given fields: guildID, tokens
func (_m *Database) SetKarmaTokens(guildID string, tokens int) error {
	ret := _m.Called(guildID, tokens)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(guildID, tokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLockChan provides a mock function with given fields: chanID, guildID, executorID, _a3
func (_m *Database) SetLockChan(chanID string, guildID string, executorID string, _a3 string) error {
	ret := _m.Called(chanID, guildID, executorID, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(chanID, guildID, executorID, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSetting provides a mock function with given fields: setting, value
func (_m *Database) SetSetting(setting string, value string) error {
	ret := _m.Called(setting, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(setting, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStarboardConfig provides a mock function with given fields: config
func (_m *Database) SetStarboardConfig(config models.StarboardConfig) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.StarboardConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStarboardEntry provides a mock function with given fields: e
func (_m *Database) SetStarboardEntry(e models.StarboardEntry) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.StarboardEntry) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTwitchNotify provides a mock function with given fields: twitchNotify
func (_m *Database) SetTwitchNotify(twitchNotify twitchnotify.DBEntry) error {
	ret := _m.Called(twitchNotify)

	var r0 error
	if rf, ok := ret.Get(0).(func(twitchnotify.DBEntry) error); ok {
		r0 = rf(twitchNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserOTAEnabled provides a mock function with given fields: userID, enabled
func (_m *Database) SetUserOTAEnabled(userID string, enabled bool) error {
	ret := _m.Called(userID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(userID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserRefreshToken provides a mock function with given fields: userID, token, expires
func (_m *Database) SetUserRefreshToken(userID string, token string, expires time.Time) error {
	ret := _m.Called(userID, token, expires)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) error); ok {
		r0 = rf(userID, token, expires)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserStarboardOptout provides a mock function with given fields: userID, enabled
func (_m *Database) SetUserStarboardOptout(userID string, enabled bool) error {
	ret := _m.Called(userID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(userID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserVerified provides a mock function with given fields: userID, enabled
func (_m *Database) SetUserVerified(userID string, enabled bool) error {
	ret := _m.Called(userID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(userID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKarma provides a mock function with given fields: userID, guildID, diff
func (_m *Database) UpdateKarma(userID string, guildID string, diff int) error {
	ret := _m.Called(userID, guildID, diff)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(userID, guildID, diff)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUnbanRequest provides a mock function with given fields: request
func (_m *Database) UpdateUnbanRequest(request models.UnbanRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.UnbanRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
