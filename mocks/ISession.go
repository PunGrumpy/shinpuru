// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	discordgo "github.com/bwmarrin/discordgo"

	image "image"

	io "io"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ISession is an autogenerated mock type for the ISession type
type ISession struct {
	mock.Mock
}

// AddHandler provides a mock function with given fields: handler
func (_m *ISession) AddHandler(handler interface{}) func() {
	ret := _m.Called(handler)

	var r0 func()
	if rf, ok := ret.Get(0).(func(interface{}) func()); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// AddHandlerOnce provides a mock function with given fields: handler
func (_m *ISession) AddHandlerOnce(handler interface{}) func() {
	ret := _m.Called(handler)

	var r0 func()
	if rf, ok := ret.Get(0).(func(interface{}) func()); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// Application provides a mock function with given fields: appID
func (_m *ISession) Application(appID string) (*discordgo.Application, error) {
	ret := _m.Called(appID)

	var r0 *discordgo.Application
	if rf, ok := ret.Get(0).(func(string) *discordgo.Application); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationAssets provides a mock function with given fields: appID
func (_m *ISession) ApplicationAssets(appID string) ([]*discordgo.Asset, error) {
	ret := _m.Called(appID)

	var r0 []*discordgo.Asset
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Asset); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationBotCreate provides a mock function with given fields: appID
func (_m *ISession) ApplicationBotCreate(appID string) (*discordgo.User, error) {
	ret := _m.Called(appID)

	var r0 *discordgo.User
	if rf, ok := ret.Get(0).(func(string) *discordgo.User); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCommand provides a mock function with given fields: appID, guildID, cmdID
func (_m *ISession) ApplicationCommand(appID string, guildID string, cmdID string) (*discordgo.ApplicationCommand, error) {
	ret := _m.Called(appID, guildID, cmdID)

	var r0 *discordgo.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string, string, string) *discordgo.ApplicationCommand); ok {
		r0 = rf(appID, guildID, cmdID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(appID, guildID, cmdID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCommandBulkOverwrite provides a mock function with given fields: appID, guildID, commands
func (_m *ISession) ApplicationCommandBulkOverwrite(appID string, guildID string, commands []*discordgo.ApplicationCommand) ([]*discordgo.ApplicationCommand, error) {
	ret := _m.Called(appID, guildID, commands)

	var r0 []*discordgo.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string, string, []*discordgo.ApplicationCommand) []*discordgo.ApplicationCommand); ok {
		r0 = rf(appID, guildID, commands)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []*discordgo.ApplicationCommand) error); ok {
		r1 = rf(appID, guildID, commands)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCommandCreate provides a mock function with given fields: appID, guildID, cmd
func (_m *ISession) ApplicationCommandCreate(appID string, guildID string, cmd *discordgo.ApplicationCommand) (*discordgo.ApplicationCommand, error) {
	ret := _m.Called(appID, guildID, cmd)

	var r0 *discordgo.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.ApplicationCommand) *discordgo.ApplicationCommand); ok {
		r0 = rf(appID, guildID, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.ApplicationCommand) error); ok {
		r1 = rf(appID, guildID, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCommandDelete provides a mock function with given fields: appID, guildID, cmdID
func (_m *ISession) ApplicationCommandDelete(appID string, guildID string, cmdID string) error {
	ret := _m.Called(appID, guildID, cmdID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(appID, guildID, cmdID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationCommandEdit provides a mock function with given fields: appID, guildID, cmdID, cmd
func (_m *ISession) ApplicationCommandEdit(appID string, guildID string, cmdID string, cmd *discordgo.ApplicationCommand) (*discordgo.ApplicationCommand, error) {
	ret := _m.Called(appID, guildID, cmdID, cmd)

	var r0 *discordgo.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string, string, string, *discordgo.ApplicationCommand) *discordgo.ApplicationCommand); ok {
		r0 = rf(appID, guildID, cmdID, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, *discordgo.ApplicationCommand) error); ok {
		r1 = rf(appID, guildID, cmdID, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCommandPermissions provides a mock function with given fields: appID, guildID, cmdID
func (_m *ISession) ApplicationCommandPermissions(appID string, guildID string, cmdID string) (*discordgo.GuildApplicationCommandPermissions, error) {
	ret := _m.Called(appID, guildID, cmdID)

	var r0 *discordgo.GuildApplicationCommandPermissions
	if rf, ok := ret.Get(0).(func(string, string, string) *discordgo.GuildApplicationCommandPermissions); ok {
		r0 = rf(appID, guildID, cmdID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildApplicationCommandPermissions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(appID, guildID, cmdID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCommandPermissionsBatchEdit provides a mock function with given fields: appID, guildID, permissions
func (_m *ISession) ApplicationCommandPermissionsBatchEdit(appID string, guildID string, permissions []*discordgo.GuildApplicationCommandPermissions) error {
	ret := _m.Called(appID, guildID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []*discordgo.GuildApplicationCommandPermissions) error); ok {
		r0 = rf(appID, guildID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationCommandPermissionsEdit provides a mock function with given fields: appID, guildID, cmdID, permissions
func (_m *ISession) ApplicationCommandPermissionsEdit(appID string, guildID string, cmdID string, permissions *discordgo.ApplicationCommandPermissionsList) error {
	ret := _m.Called(appID, guildID, cmdID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, *discordgo.ApplicationCommandPermissionsList) error); ok {
		r0 = rf(appID, guildID, cmdID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationCommands provides a mock function with given fields: appID, guildID
func (_m *ISession) ApplicationCommands(appID string, guildID string) ([]*discordgo.ApplicationCommand, error) {
	ret := _m.Called(appID, guildID)

	var r0 []*discordgo.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string, string) []*discordgo.ApplicationCommand); ok {
		r0 = rf(appID, guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationCreate provides a mock function with given fields: ap
func (_m *ISession) ApplicationCreate(ap *discordgo.Application) (*discordgo.Application, error) {
	ret := _m.Called(ap)

	var r0 *discordgo.Application
	if rf, ok := ret.Get(0).(func(*discordgo.Application) *discordgo.Application); ok {
		r0 = rf(ap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.Application) error); ok {
		r1 = rf(ap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationDelete provides a mock function with given fields: appID
func (_m *ISession) ApplicationDelete(appID string) error {
	ret := _m.Called(appID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationUpdate provides a mock function with given fields: appID, ap
func (_m *ISession) ApplicationUpdate(appID string, ap *discordgo.Application) (*discordgo.Application, error) {
	ret := _m.Called(appID, ap)

	var r0 *discordgo.Application
	if rf, ok := ret.Get(0).(func(string, *discordgo.Application) *discordgo.Application); ok {
		r0 = rf(appID, ap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.Application) error); ok {
		r1 = rf(appID, ap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Applications provides a mock function with given fields:
func (_m *ISession) Applications() ([]*discordgo.Application, error) {
	ret := _m.Called()

	var r0 []*discordgo.Application
	if rf, ok := ret.Get(0).(func() []*discordgo.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoModerationRule provides a mock function with given fields: guildID, ruleID
func (_m *ISession) AutoModerationRule(guildID string, ruleID string) (*discordgo.AutoModerationRule, error) {
	ret := _m.Called(guildID, ruleID)

	var r0 *discordgo.AutoModerationRule
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.AutoModerationRule); ok {
		r0 = rf(guildID, ruleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.AutoModerationRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, ruleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoModerationRuleCreate provides a mock function with given fields: guildID, rule
func (_m *ISession) AutoModerationRuleCreate(guildID string, rule *discordgo.AutoModerationRule) (*discordgo.AutoModerationRule, error) {
	ret := _m.Called(guildID, rule)

	var r0 *discordgo.AutoModerationRule
	if rf, ok := ret.Get(0).(func(string, *discordgo.AutoModerationRule) *discordgo.AutoModerationRule); ok {
		r0 = rf(guildID, rule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.AutoModerationRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.AutoModerationRule) error); ok {
		r1 = rf(guildID, rule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoModerationRuleDelete provides a mock function with given fields: guildID, ruleID
func (_m *ISession) AutoModerationRuleDelete(guildID string, ruleID string) error {
	ret := _m.Called(guildID, ruleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, ruleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoModerationRuleEdit provides a mock function with given fields: guildID, ruleID, rule
func (_m *ISession) AutoModerationRuleEdit(guildID string, ruleID string, rule *discordgo.AutoModerationRule) (*discordgo.AutoModerationRule, error) {
	ret := _m.Called(guildID, ruleID, rule)

	var r0 *discordgo.AutoModerationRule
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.AutoModerationRule) *discordgo.AutoModerationRule); ok {
		r0 = rf(guildID, ruleID, rule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.AutoModerationRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.AutoModerationRule) error); ok {
		r1 = rf(guildID, ruleID, rule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoModerationRules provides a mock function with given fields: guildID
func (_m *ISession) AutoModerationRules(guildID string) ([]*discordgo.AutoModerationRule, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.AutoModerationRule
	if rf, ok := ret.Get(0).(func(string) []*discordgo.AutoModerationRule); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.AutoModerationRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Channel provides a mock function with given fields: channelID
func (_m *ISession) Channel(channelID string) (*discordgo.Channel, error) {
	ret := _m.Called(channelID)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string) *discordgo.Channel); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelDelete provides a mock function with given fields: channelID
func (_m *ISession) ChannelDelete(channelID string) (*discordgo.Channel, error) {
	ret := _m.Called(channelID)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string) *discordgo.Channel); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelEdit provides a mock function with given fields: channelID, data
func (_m *ISession) ChannelEdit(channelID string, data *discordgo.ChannelEdit) (*discordgo.Channel, error) {
	ret := _m.Called(channelID, data)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, *discordgo.ChannelEdit) *discordgo.Channel); ok {
		r0 = rf(channelID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.ChannelEdit) error); ok {
		r1 = rf(channelID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelEditComplex provides a mock function with given fields: channelID, data
func (_m *ISession) ChannelEditComplex(channelID string, data *discordgo.ChannelEdit) (*discordgo.Channel, error) {
	ret := _m.Called(channelID, data)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, *discordgo.ChannelEdit) *discordgo.Channel); ok {
		r0 = rf(channelID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.ChannelEdit) error); ok {
		r1 = rf(channelID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelFileSend provides a mock function with given fields: channelID, name, r
func (_m *ISession) ChannelFileSend(channelID string, name string, r io.Reader) (*discordgo.Message, error) {
	ret := _m.Called(channelID, name, r)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) *discordgo.Message); ok {
		r0 = rf(channelID, name, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = rf(channelID, name, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelFileSendWithMessage provides a mock function with given fields: channelID, content, name, r
func (_m *ISession) ChannelFileSendWithMessage(channelID string, content string, name string, r io.Reader) (*discordgo.Message, error) {
	ret := _m.Called(channelID, content, name, r)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, string, io.Reader) *discordgo.Message); ok {
		r0 = rf(channelID, content, name, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, io.Reader) error); ok {
		r1 = rf(channelID, content, name, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelInviteCreate provides a mock function with given fields: channelID, i
func (_m *ISession) ChannelInviteCreate(channelID string, i discordgo.Invite) (*discordgo.Invite, error) {
	ret := _m.Called(channelID, i)

	var r0 *discordgo.Invite
	if rf, ok := ret.Get(0).(func(string, discordgo.Invite) *discordgo.Invite); ok {
		r0 = rf(channelID, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, discordgo.Invite) error); ok {
		r1 = rf(channelID, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelInvites provides a mock function with given fields: channelID
func (_m *ISession) ChannelInvites(channelID string) ([]*discordgo.Invite, error) {
	ret := _m.Called(channelID)

	var r0 []*discordgo.Invite
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Invite); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessage provides a mock function with given fields: channelID, messageID
func (_m *ISession) ChannelMessage(channelID string, messageID string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Message); ok {
		r0 = rf(channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageCrosspost provides a mock function with given fields: channelID, messageID
func (_m *ISession) ChannelMessageCrosspost(channelID string, messageID string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Message); ok {
		r0 = rf(channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageDelete provides a mock function with given fields: channelID, messageID
func (_m *ISession) ChannelMessageDelete(channelID string, messageID string) error {
	ret := _m.Called(channelID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelMessageEdit provides a mock function with given fields: channelID, messageID, content
func (_m *ISession) ChannelMessageEdit(channelID string, messageID string, content string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID, content)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, string) *discordgo.Message); ok {
		r0 = rf(channelID, messageID, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(channelID, messageID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageEditComplex provides a mock function with given fields: m
func (_m *ISession) ChannelMessageEditComplex(m *discordgo.MessageEdit) (*discordgo.Message, error) {
	ret := _m.Called(m)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(*discordgo.MessageEdit) *discordgo.Message); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.MessageEdit) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageEditEmbed provides a mock function with given fields: channelID, messageID, embed
func (_m *ISession) ChannelMessageEditEmbed(channelID string, messageID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID, embed)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.MessageEmbed) *discordgo.Message); ok {
		r0 = rf(channelID, messageID, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.MessageEmbed) error); ok {
		r1 = rf(channelID, messageID, embed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageEditEmbeds provides a mock function with given fields: channelID, messageID, embeds
func (_m *ISession) ChannelMessageEditEmbeds(channelID string, messageID string, embeds []*discordgo.MessageEmbed) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID, embeds)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, []*discordgo.MessageEmbed) *discordgo.Message); ok {
		r0 = rf(channelID, messageID, embeds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []*discordgo.MessageEmbed) error); ok {
		r1 = rf(channelID, messageID, embeds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessagePin provides a mock function with given fields: channelID, messageID
func (_m *ISession) ChannelMessagePin(channelID string, messageID string) error {
	ret := _m.Called(channelID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelMessageSend provides a mock function with given fields: channelID, content
func (_m *ISession) ChannelMessageSend(channelID string, content string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, content)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Message); ok {
		r0 = rf(channelID, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendComplex provides a mock function with given fields: channelID, data
func (_m *ISession) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (*discordgo.Message, error) {
	ret := _m.Called(channelID, data)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, *discordgo.MessageSend) *discordgo.Message); ok {
		r0 = rf(channelID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.MessageSend) error); ok {
		r1 = rf(channelID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendEmbed provides a mock function with given fields: channelID, embed
func (_m *ISession) ChannelMessageSendEmbed(channelID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error) {
	ret := _m.Called(channelID, embed)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, *discordgo.MessageEmbed) *discordgo.Message); ok {
		r0 = rf(channelID, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.MessageEmbed) error); ok {
		r1 = rf(channelID, embed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendEmbedReply provides a mock function with given fields: channelID, embed, reference
func (_m *ISession) ChannelMessageSendEmbedReply(channelID string, embed *discordgo.MessageEmbed, reference *discordgo.MessageReference) (*discordgo.Message, error) {
	ret := _m.Called(channelID, embed, reference)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, *discordgo.MessageEmbed, *discordgo.MessageReference) *discordgo.Message); ok {
		r0 = rf(channelID, embed, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.MessageEmbed, *discordgo.MessageReference) error); ok {
		r1 = rf(channelID, embed, reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendEmbeds provides a mock function with given fields: channelID, embeds
func (_m *ISession) ChannelMessageSendEmbeds(channelID string, embeds []*discordgo.MessageEmbed) (*discordgo.Message, error) {
	ret := _m.Called(channelID, embeds)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, []*discordgo.MessageEmbed) *discordgo.Message); ok {
		r0 = rf(channelID, embeds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*discordgo.MessageEmbed) error); ok {
		r1 = rf(channelID, embeds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendEmbedsReply provides a mock function with given fields: channelID, embeds, reference
func (_m *ISession) ChannelMessageSendEmbedsReply(channelID string, embeds []*discordgo.MessageEmbed, reference *discordgo.MessageReference) (*discordgo.Message, error) {
	ret := _m.Called(channelID, embeds, reference)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, []*discordgo.MessageEmbed, *discordgo.MessageReference) *discordgo.Message); ok {
		r0 = rf(channelID, embeds, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*discordgo.MessageEmbed, *discordgo.MessageReference) error); ok {
		r1 = rf(channelID, embeds, reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendReply provides a mock function with given fields: channelID, content, reference
func (_m *ISession) ChannelMessageSendReply(channelID string, content string, reference *discordgo.MessageReference) (*discordgo.Message, error) {
	ret := _m.Called(channelID, content, reference)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.MessageReference) *discordgo.Message); ok {
		r0 = rf(channelID, content, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.MessageReference) error); ok {
		r1 = rf(channelID, content, reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendTTS provides a mock function with given fields: channelID, content
func (_m *ISession) ChannelMessageSendTTS(channelID string, content string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, content)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Message); ok {
		r0 = rf(channelID, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageUnpin provides a mock function with given fields: channelID, messageID
func (_m *ISession) ChannelMessageUnpin(channelID string, messageID string) error {
	ret := _m.Called(channelID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelMessages provides a mock function with given fields: channelID, limit, beforeID, afterID, aroundID
func (_m *ISession) ChannelMessages(channelID string, limit int, beforeID string, afterID string, aroundID string) ([]*discordgo.Message, error) {
	ret := _m.Called(channelID, limit, beforeID, afterID, aroundID)

	var r0 []*discordgo.Message
	if rf, ok := ret.Get(0).(func(string, int, string, string, string) []*discordgo.Message); ok {
		r0 = rf(channelID, limit, beforeID, afterID, aroundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, string, string, string) error); ok {
		r1 = rf(channelID, limit, beforeID, afterID, aroundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessagesBulkDelete provides a mock function with given fields: channelID, messages
func (_m *ISession) ChannelMessagesBulkDelete(channelID string, messages []string) error {
	ret := _m.Called(channelID, messages)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(channelID, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelMessagesPinned provides a mock function with given fields: channelID
func (_m *ISession) ChannelMessagesPinned(channelID string) ([]*discordgo.Message, error) {
	ret := _m.Called(channelID)

	var r0 []*discordgo.Message
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Message); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelNewsFollow provides a mock function with given fields: channelID, targetID
func (_m *ISession) ChannelNewsFollow(channelID string, targetID string) (*discordgo.ChannelFollow, error) {
	ret := _m.Called(channelID, targetID)

	var r0 *discordgo.ChannelFollow
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.ChannelFollow); ok {
		r0 = rf(channelID, targetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ChannelFollow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, targetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelPermissionDelete provides a mock function with given fields: channelID, targetID
func (_m *ISession) ChannelPermissionDelete(channelID string, targetID string) error {
	ret := _m.Called(channelID, targetID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, targetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelPermissionSet provides a mock function with given fields: channelID, targetID, targetType, allow, deny
func (_m *ISession) ChannelPermissionSet(channelID string, targetID string, targetType discordgo.PermissionOverwriteType, allow int64, deny int64) error {
	ret := _m.Called(channelID, targetID, targetType, allow, deny)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, discordgo.PermissionOverwriteType, int64, int64) error); ok {
		r0 = rf(channelID, targetID, targetType, allow, deny)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelTyping provides a mock function with given fields: channelID
func (_m *ISession) ChannelTyping(channelID string) error {
	ret := _m.Called(channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelVoiceJoin provides a mock function with given fields: gID, cID, mute, deaf
func (_m *ISession) ChannelVoiceJoin(gID string, cID string, mute bool, deaf bool) (*discordgo.VoiceConnection, error) {
	ret := _m.Called(gID, cID, mute, deaf)

	var r0 *discordgo.VoiceConnection
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) *discordgo.VoiceConnection); ok {
		r0 = rf(gID, cID, mute, deaf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.VoiceConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool) error); ok {
		r1 = rf(gID, cID, mute, deaf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelVoiceJoinManual provides a mock function with given fields: gID, cID, mute, deaf
func (_m *ISession) ChannelVoiceJoinManual(gID string, cID string, mute bool, deaf bool) error {
	ret := _m.Called(gID, cID, mute, deaf)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) error); ok {
		r0 = rf(gID, cID, mute, deaf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChannelWebhooks provides a mock function with given fields: channelID
func (_m *ISession) ChannelWebhooks(channelID string) ([]*discordgo.Webhook, error) {
	ret := _m.Called(channelID)

	var r0 []*discordgo.Webhook
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Webhook); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *ISession) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseWithCode provides a mock function with given fields: closeCode
func (_m *ISession) CloseWithCode(closeCode int) error {
	ret := _m.Called(closeCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(closeCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowupMessageCreate provides a mock function with given fields: interaction, wait, data
func (_m *ISession) FollowupMessageCreate(interaction *discordgo.Interaction, wait bool, data *discordgo.WebhookParams) (*discordgo.Message, error) {
	ret := _m.Called(interaction, wait, data)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction, bool, *discordgo.WebhookParams) *discordgo.Message); ok {
		r0 = rf(interaction, wait, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.Interaction, bool, *discordgo.WebhookParams) error); ok {
		r1 = rf(interaction, wait, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowupMessageDelete provides a mock function with given fields: interaction, messageID
func (_m *ISession) FollowupMessageDelete(interaction *discordgo.Interaction, messageID string) error {
	ret := _m.Called(interaction, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction, string) error); ok {
		r0 = rf(interaction, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowupMessageEdit provides a mock function with given fields: interaction, messageID, data
func (_m *ISession) FollowupMessageEdit(interaction *discordgo.Interaction, messageID string, data *discordgo.WebhookEdit) (*discordgo.Message, error) {
	ret := _m.Called(interaction, messageID, data)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction, string, *discordgo.WebhookEdit) *discordgo.Message); ok {
		r0 = rf(interaction, messageID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.Interaction, string, *discordgo.WebhookEdit) error); ok {
		r1 = rf(interaction, messageID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gateway provides a mock function with given fields:
func (_m *ISession) Gateway() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GatewayBot provides a mock function with given fields:
func (_m *ISession) GatewayBot() (*discordgo.GatewayBotResponse, error) {
	ret := _m.Called()

	var r0 *discordgo.GatewayBotResponse
	if rf, ok := ret.Get(0).(func() *discordgo.GatewayBotResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GatewayBotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guild provides a mock function with given fields: guildID
func (_m *ISession) Guild(guildID string) (*discordgo.Guild, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string) *discordgo.Guild); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildApplicationCommandsPermissions provides a mock function with given fields: appID, guildID
func (_m *ISession) GuildApplicationCommandsPermissions(appID string, guildID string) ([]*discordgo.GuildApplicationCommandPermissions, error) {
	ret := _m.Called(appID, guildID)

	var r0 []*discordgo.GuildApplicationCommandPermissions
	if rf, ok := ret.Get(0).(func(string, string) []*discordgo.GuildApplicationCommandPermissions); ok {
		r0 = rf(appID, guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.GuildApplicationCommandPermissions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildAuditLog provides a mock function with given fields: guildID, userID, beforeID, actionType, limit
func (_m *ISession) GuildAuditLog(guildID string, userID string, beforeID string, actionType int, limit int) (*discordgo.GuildAuditLog, error) {
	ret := _m.Called(guildID, userID, beforeID, actionType, limit)

	var r0 *discordgo.GuildAuditLog
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) *discordgo.GuildAuditLog); ok {
		r0 = rf(guildID, userID, beforeID, actionType, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildAuditLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(guildID, userID, beforeID, actionType, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildBan provides a mock function with given fields: guildID, userID
func (_m *ISession) GuildBan(guildID string, userID string) (*discordgo.GuildBan, error) {
	ret := _m.Called(guildID, userID)

	var r0 *discordgo.GuildBan
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.GuildBan); ok {
		r0 = rf(guildID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildBan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildBanCreate provides a mock function with given fields: guildID, userID, days
func (_m *ISession) GuildBanCreate(guildID string, userID string, days int) error {
	ret := _m.Called(guildID, userID, days)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(guildID, userID, days)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildBanCreateWithReason provides a mock function with given fields: guildID, userID, reason, days
func (_m *ISession) GuildBanCreateWithReason(guildID string, userID string, reason string, days int) error {
	ret := _m.Called(guildID, userID, reason, days)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) error); ok {
		r0 = rf(guildID, userID, reason, days)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildBanDelete provides a mock function with given fields: guildID, userID
func (_m *ISession) GuildBanDelete(guildID string, userID string) error {
	ret := _m.Called(guildID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildBans provides a mock function with given fields: guildID, limit, beforeID, afterID
func (_m *ISession) GuildBans(guildID string, limit int, beforeID string, afterID string) ([]*discordgo.GuildBan, error) {
	ret := _m.Called(guildID, limit, beforeID, afterID)

	var r0 []*discordgo.GuildBan
	if rf, ok := ret.Get(0).(func(string, int, string, string) []*discordgo.GuildBan); ok {
		r0 = rf(guildID, limit, beforeID, afterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.GuildBan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, string, string) error); ok {
		r1 = rf(guildID, limit, beforeID, afterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildChannelCreate provides a mock function with given fields: guildID, name, ctype
func (_m *ISession) GuildChannelCreate(guildID string, name string, ctype discordgo.ChannelType) (*discordgo.Channel, error) {
	ret := _m.Called(guildID, name, ctype)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, string, discordgo.ChannelType) *discordgo.Channel); ok {
		r0 = rf(guildID, name, ctype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, discordgo.ChannelType) error); ok {
		r1 = rf(guildID, name, ctype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildChannelCreateComplex provides a mock function with given fields: guildID, data
func (_m *ISession) GuildChannelCreateComplex(guildID string, data discordgo.GuildChannelCreateData) (*discordgo.Channel, error) {
	ret := _m.Called(guildID, data)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, discordgo.GuildChannelCreateData) *discordgo.Channel); ok {
		r0 = rf(guildID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, discordgo.GuildChannelCreateData) error); ok {
		r1 = rf(guildID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildChannels provides a mock function with given fields: guildID
func (_m *ISession) GuildChannels(guildID string) ([]*discordgo.Channel, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.Channel
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Channel); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildChannelsReorder provides a mock function with given fields: guildID, channels
func (_m *ISession) GuildChannelsReorder(guildID string, channels []*discordgo.Channel) error {
	ret := _m.Called(guildID, channels)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*discordgo.Channel) error); ok {
		r0 = rf(guildID, channels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildCreate provides a mock function with given fields: name
func (_m *ISession) GuildCreate(name string) (*discordgo.Guild, error) {
	ret := _m.Called(name)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string) *discordgo.Guild); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildCreateWithTemplate provides a mock function with given fields: templateCode, name, icon
func (_m *ISession) GuildCreateWithTemplate(templateCode string, name string, icon string) (*discordgo.Guild, error) {
	ret := _m.Called(templateCode, name, icon)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string, string, string) *discordgo.Guild); ok {
		r0 = rf(templateCode, name, icon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(templateCode, name, icon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildDelete provides a mock function with given fields: guildID
func (_m *ISession) GuildDelete(guildID string) (*discordgo.Guild, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string) *discordgo.Guild); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEdit provides a mock function with given fields: guildID, g
func (_m *ISession) GuildEdit(guildID string, g *discordgo.GuildParams) (*discordgo.Guild, error) {
	ret := _m.Called(guildID, g)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string, *discordgo.GuildParams) *discordgo.Guild); ok {
		r0 = rf(guildID, g)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.GuildParams) error); ok {
		r1 = rf(guildID, g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEmbed provides a mock function with given fields: guildID
func (_m *ISession) GuildEmbed(guildID string) (*discordgo.GuildEmbed, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.GuildEmbed
	if rf, ok := ret.Get(0).(func(string) *discordgo.GuildEmbed); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildEmbed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEmbedEdit provides a mock function with given fields: guildID, data
func (_m *ISession) GuildEmbedEdit(guildID string, data *discordgo.GuildEmbed) error {
	ret := _m.Called(guildID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *discordgo.GuildEmbed) error); ok {
		r0 = rf(guildID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildEmoji provides a mock function with given fields: guildID, emojiID
func (_m *ISession) GuildEmoji(guildID string, emojiID string) (*discordgo.Emoji, error) {
	ret := _m.Called(guildID, emojiID)

	var r0 *discordgo.Emoji
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Emoji); ok {
		r0 = rf(guildID, emojiID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Emoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, emojiID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEmojiCreate provides a mock function with given fields: guildID, data
func (_m *ISession) GuildEmojiCreate(guildID string, data *discordgo.EmojiParams) (*discordgo.Emoji, error) {
	ret := _m.Called(guildID, data)

	var r0 *discordgo.Emoji
	if rf, ok := ret.Get(0).(func(string, *discordgo.EmojiParams) *discordgo.Emoji); ok {
		r0 = rf(guildID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Emoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.EmojiParams) error); ok {
		r1 = rf(guildID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEmojiDelete provides a mock function with given fields: guildID, emojiID
func (_m *ISession) GuildEmojiDelete(guildID string, emojiID string) error {
	ret := _m.Called(guildID, emojiID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, emojiID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildEmojiEdit provides a mock function with given fields: guildID, emojiID, data
func (_m *ISession) GuildEmojiEdit(guildID string, emojiID string, data *discordgo.EmojiParams) (*discordgo.Emoji, error) {
	ret := _m.Called(guildID, emojiID, data)

	var r0 *discordgo.Emoji
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.EmojiParams) *discordgo.Emoji); ok {
		r0 = rf(guildID, emojiID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Emoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.EmojiParams) error); ok {
		r1 = rf(guildID, emojiID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildEmojis provides a mock function with given fields: guildID
func (_m *ISession) GuildEmojis(guildID string) ([]*discordgo.Emoji, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.Emoji
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Emoji); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Emoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildIcon provides a mock function with given fields: guildID
func (_m *ISession) GuildIcon(guildID string) (image.Image, error) {
	ret := _m.Called(guildID)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(string) image.Image); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildIntegrationCreate provides a mock function with given fields: guildID, integrationType, integrationID
func (_m *ISession) GuildIntegrationCreate(guildID string, integrationType string, integrationID string) error {
	ret := _m.Called(guildID, integrationType, integrationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, integrationType, integrationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildIntegrationDelete provides a mock function with given fields: guildID, integrationID
func (_m *ISession) GuildIntegrationDelete(guildID string, integrationID string) error {
	ret := _m.Called(guildID, integrationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, integrationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildIntegrationEdit provides a mock function with given fields: guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons
func (_m *ISession) GuildIntegrationEdit(guildID string, integrationID string, expireBehavior int, expireGracePeriod int, enableEmoticons bool) error {
	ret := _m.Called(guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, bool) error); ok {
		r0 = rf(guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildIntegrations provides a mock function with given fields: guildID
func (_m *ISession) GuildIntegrations(guildID string) ([]*discordgo.Integration, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.Integration
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Integration); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Integration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildInvites provides a mock function with given fields: guildID
func (_m *ISession) GuildInvites(guildID string) ([]*discordgo.Invite, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.Invite
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Invite); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildLeave provides a mock function with given fields: guildID
func (_m *ISession) GuildLeave(guildID string) error {
	ret := _m.Called(guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMember provides a mock function with given fields: guildID, userID
func (_m *ISession) GuildMember(guildID string, userID string) (*discordgo.Member, error) {
	ret := _m.Called(guildID, userID)

	var r0 *discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Member); ok {
		r0 = rf(guildID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(guildID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMemberAdd provides a mock function with given fields: guildID, userID, data
func (_m *ISession) GuildMemberAdd(guildID string, userID string, data *discordgo.GuildMemberAddParams) error {
	ret := _m.Called(guildID, userID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.GuildMemberAddParams) error); ok {
		r0 = rf(guildID, userID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberDeafen provides a mock function with given fields: guildID, userID, deaf
func (_m *ISession) GuildMemberDeafen(guildID string, userID string, deaf bool) error {
	ret := _m.Called(guildID, userID, deaf)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(guildID, userID, deaf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberDelete provides a mock function with given fields: guildID, userID
func (_m *ISession) GuildMemberDelete(guildID string, userID string) error {
	ret := _m.Called(guildID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberDeleteWithReason provides a mock function with given fields: guildID, userID, reason
func (_m *ISession) GuildMemberDeleteWithReason(guildID string, userID string, reason string) error {
	ret := _m.Called(guildID, userID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, userID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberEdit provides a mock function with given fields: guildID, userID, data
func (_m *ISession) GuildMemberEdit(guildID string, userID string, data *discordgo.GuildMemberParams) (*discordgo.Member, error) {
	ret := _m.Called(guildID, userID, data)

	var r0 *discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.GuildMemberParams) *discordgo.Member); ok {
		r0 = rf(guildID, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.GuildMemberParams) error); ok {
		r1 = rf(guildID, userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMemberEditComplex provides a mock function with given fields: guildID, userID, data
func (_m *ISession) GuildMemberEditComplex(guildID string, userID string, data *discordgo.GuildMemberParams) (*discordgo.Member, error) {
	ret := _m.Called(guildID, userID, data)

	var r0 *discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.GuildMemberParams) *discordgo.Member); ok {
		r0 = rf(guildID, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.GuildMemberParams) error); ok {
		r1 = rf(guildID, userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMemberMove provides a mock function with given fields: guildID, userID, channelID
func (_m *ISession) GuildMemberMove(guildID string, userID string, channelID *string) error {
	ret := _m.Called(guildID, userID, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *string) error); ok {
		r0 = rf(guildID, userID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberMute provides a mock function with given fields: guildID, userID, mute
func (_m *ISession) GuildMemberMute(guildID string, userID string, mute bool) error {
	ret := _m.Called(guildID, userID, mute)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(guildID, userID, mute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberNickname provides a mock function with given fields: guildID, userID, nickname
func (_m *ISession) GuildMemberNickname(guildID string, userID string, nickname string) error {
	ret := _m.Called(guildID, userID, nickname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, userID, nickname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberRoleAdd provides a mock function with given fields: guildID, userID, roleID
func (_m *ISession) GuildMemberRoleAdd(guildID string, userID string, roleID string) error {
	ret := _m.Called(guildID, userID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberRoleRemove provides a mock function with given fields: guildID, userID, roleID
func (_m *ISession) GuildMemberRoleRemove(guildID string, userID string, roleID string) error {
	ret := _m.Called(guildID, userID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(guildID, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMemberTimeout provides a mock function with given fields: guildID, userID, until
func (_m *ISession) GuildMemberTimeout(guildID string, userID string, until *time.Time) error {
	ret := _m.Called(guildID, userID, until)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *time.Time) error); ok {
		r0 = rf(guildID, userID, until)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildMembers provides a mock function with given fields: guildID, after, limit
func (_m *ISession) GuildMembers(guildID string, after string, limit int) ([]*discordgo.Member, error) {
	ret := _m.Called(guildID, after, limit)

	var r0 []*discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string, int) []*discordgo.Member); ok {
		r0 = rf(guildID, after, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(guildID, after, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMembersSearch provides a mock function with given fields: guildID, query, limit
func (_m *ISession) GuildMembersSearch(guildID string, query string, limit int) ([]*discordgo.Member, error) {
	ret := _m.Called(guildID, query, limit)

	var r0 []*discordgo.Member
	if rf, ok := ret.Get(0).(func(string, string, int) []*discordgo.Member); ok {
		r0 = rf(guildID, query, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(guildID, query, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildPreview provides a mock function with given fields: guildID
func (_m *ISession) GuildPreview(guildID string) (*discordgo.GuildPreview, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.GuildPreview
	if rf, ok := ret.Get(0).(func(string) *discordgo.GuildPreview); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildPreview)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildPrune provides a mock function with given fields: guildID, days
func (_m *ISession) GuildPrune(guildID string, days uint32) (uint32, error) {
	ret := _m.Called(guildID, days)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, uint32) uint32); ok {
		r0 = rf(guildID, days)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint32) error); ok {
		r1 = rf(guildID, days)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildPruneCount provides a mock function with given fields: guildID, days
func (_m *ISession) GuildPruneCount(guildID string, days uint32) (uint32, error) {
	ret := _m.Called(guildID, days)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, uint32) uint32); ok {
		r0 = rf(guildID, days)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint32) error); ok {
		r1 = rf(guildID, days)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildRoleCreate provides a mock function with given fields: guildID, data
func (_m *ISession) GuildRoleCreate(guildID string, data *discordgo.RoleParams) (*discordgo.Role, error) {
	ret := _m.Called(guildID, data)

	var r0 *discordgo.Role
	if rf, ok := ret.Get(0).(func(string, *discordgo.RoleParams) *discordgo.Role); ok {
		r0 = rf(guildID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.RoleParams) error); ok {
		r1 = rf(guildID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildRoleDelete provides a mock function with given fields: guildID, roleID
func (_m *ISession) GuildRoleDelete(guildID string, roleID string) error {
	ret := _m.Called(guildID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildRoleEdit provides a mock function with given fields: guildID, roleID, data
func (_m *ISession) GuildRoleEdit(guildID string, roleID string, data *discordgo.RoleParams) (*discordgo.Role, error) {
	ret := _m.Called(guildID, roleID, data)

	var r0 *discordgo.Role
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.RoleParams) *discordgo.Role); ok {
		r0 = rf(guildID, roleID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.RoleParams) error); ok {
		r1 = rf(guildID, roleID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildRoleReorder provides a mock function with given fields: guildID, roles
func (_m *ISession) GuildRoleReorder(guildID string, roles []*discordgo.Role) ([]*discordgo.Role, error) {
	ret := _m.Called(guildID, roles)

	var r0 []*discordgo.Role
	if rf, ok := ret.Get(0).(func(string, []*discordgo.Role) []*discordgo.Role); ok {
		r0 = rf(guildID, roles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*discordgo.Role) error); ok {
		r1 = rf(guildID, roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildRoles provides a mock function with given fields: guildID
func (_m *ISession) GuildRoles(guildID string) ([]*discordgo.Role, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.Role
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Role); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildScheduledEvent provides a mock function with given fields: guildID, eventID, userCount
func (_m *ISession) GuildScheduledEvent(guildID string, eventID string, userCount bool) (*discordgo.GuildScheduledEvent, error) {
	ret := _m.Called(guildID, eventID, userCount)

	var r0 *discordgo.GuildScheduledEvent
	if rf, ok := ret.Get(0).(func(string, string, bool) *discordgo.GuildScheduledEvent); ok {
		r0 = rf(guildID, eventID, userCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildScheduledEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(guildID, eventID, userCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildScheduledEventCreate provides a mock function with given fields: guildID, event
func (_m *ISession) GuildScheduledEventCreate(guildID string, event *discordgo.GuildScheduledEventParams) (*discordgo.GuildScheduledEvent, error) {
	ret := _m.Called(guildID, event)

	var r0 *discordgo.GuildScheduledEvent
	if rf, ok := ret.Get(0).(func(string, *discordgo.GuildScheduledEventParams) *discordgo.GuildScheduledEvent); ok {
		r0 = rf(guildID, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildScheduledEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.GuildScheduledEventParams) error); ok {
		r1 = rf(guildID, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildScheduledEventDelete provides a mock function with given fields: guildID, eventID
func (_m *ISession) GuildScheduledEventDelete(guildID string, eventID string) error {
	ret := _m.Called(guildID, eventID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildScheduledEventEdit provides a mock function with given fields: guildID, eventID, event
func (_m *ISession) GuildScheduledEventEdit(guildID string, eventID string, event *discordgo.GuildScheduledEventParams) (*discordgo.GuildScheduledEvent, error) {
	ret := _m.Called(guildID, eventID, event)

	var r0 *discordgo.GuildScheduledEvent
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.GuildScheduledEventParams) *discordgo.GuildScheduledEvent); ok {
		r0 = rf(guildID, eventID, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildScheduledEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.GuildScheduledEventParams) error); ok {
		r1 = rf(guildID, eventID, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildScheduledEventUsers provides a mock function with given fields: guildID, eventID, limit, withMember, beforeID, afterID
func (_m *ISession) GuildScheduledEventUsers(guildID string, eventID string, limit int, withMember bool, beforeID string, afterID string) ([]*discordgo.GuildScheduledEventUser, error) {
	ret := _m.Called(guildID, eventID, limit, withMember, beforeID, afterID)

	var r0 []*discordgo.GuildScheduledEventUser
	if rf, ok := ret.Get(0).(func(string, string, int, bool, string, string) []*discordgo.GuildScheduledEventUser); ok {
		r0 = rf(guildID, eventID, limit, withMember, beforeID, afterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.GuildScheduledEventUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, bool, string, string) error); ok {
		r1 = rf(guildID, eventID, limit, withMember, beforeID, afterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildScheduledEvents provides a mock function with given fields: guildID, userCount
func (_m *ISession) GuildScheduledEvents(guildID string, userCount bool) ([]*discordgo.GuildScheduledEvent, error) {
	ret := _m.Called(guildID, userCount)

	var r0 []*discordgo.GuildScheduledEvent
	if rf, ok := ret.Get(0).(func(string, bool) []*discordgo.GuildScheduledEvent); ok {
		r0 = rf(guildID, userCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.GuildScheduledEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(guildID, userCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildSplash provides a mock function with given fields: guildID
func (_m *ISession) GuildSplash(guildID string) (image.Image, error) {
	ret := _m.Called(guildID)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(string) image.Image); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildTemplate provides a mock function with given fields: templateCode
func (_m *ISession) GuildTemplate(templateCode string) (*discordgo.GuildTemplate, error) {
	ret := _m.Called(templateCode)

	var r0 *discordgo.GuildTemplate
	if rf, ok := ret.Get(0).(func(string) *discordgo.GuildTemplate); ok {
		r0 = rf(templateCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(templateCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildTemplateCreate provides a mock function with given fields: guildID, data
func (_m *ISession) GuildTemplateCreate(guildID string, data *discordgo.GuildTemplateParams) *discordgo.GuildTemplate {
	ret := _m.Called(guildID, data)

	var r0 *discordgo.GuildTemplate
	if rf, ok := ret.Get(0).(func(string, *discordgo.GuildTemplateParams) *discordgo.GuildTemplate); ok {
		r0 = rf(guildID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildTemplate)
		}
	}

	return r0
}

// GuildTemplateDelete provides a mock function with given fields: guildID, templateCode
func (_m *ISession) GuildTemplateDelete(guildID string, templateCode string) error {
	ret := _m.Called(guildID, templateCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, templateCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildTemplateEdit provides a mock function with given fields: guildID, templateCode, data
func (_m *ISession) GuildTemplateEdit(guildID string, templateCode string, data *discordgo.GuildTemplateParams) (*discordgo.GuildTemplate, error) {
	ret := _m.Called(guildID, templateCode, data)

	var r0 *discordgo.GuildTemplate
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.GuildTemplateParams) *discordgo.GuildTemplate); ok {
		r0 = rf(guildID, templateCode, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.GuildTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.GuildTemplateParams) error); ok {
		r1 = rf(guildID, templateCode, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildTemplateSync provides a mock function with given fields: guildID, templateCode
func (_m *ISession) GuildTemplateSync(guildID string, templateCode string) error {
	ret := _m.Called(guildID, templateCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, templateCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildTemplates provides a mock function with given fields: guildID
func (_m *ISession) GuildTemplates(guildID string) ([]*discordgo.GuildTemplate, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.GuildTemplate
	if rf, ok := ret.Get(0).(func(string) []*discordgo.GuildTemplate); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.GuildTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildThreadsActive provides a mock function with given fields: guildID
func (_m *ISession) GuildThreadsActive(guildID string) (*discordgo.ThreadsList, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.ThreadsList
	if rf, ok := ret.Get(0).(func(string) *discordgo.ThreadsList); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ThreadsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildWebhooks provides a mock function with given fields: guildID
func (_m *ISession) GuildWebhooks(guildID string) ([]*discordgo.Webhook, error) {
	ret := _m.Called(guildID)

	var r0 []*discordgo.Webhook
	if rf, ok := ret.Get(0).(func(string) []*discordgo.Webhook); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildWithCounts provides a mock function with given fields: guildID
func (_m *ISession) GuildWithCounts(guildID string) (*discordgo.Guild, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.Guild
	if rf, ok := ret.Get(0).(func(string) *discordgo.Guild); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeartbeatLatency provides a mock function with given fields:
func (_m *ISession) HeartbeatLatency() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// InteractionRespond provides a mock function with given fields: interaction, resp
func (_m *ISession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse) error {
	ret := _m.Called(interaction, resp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction, *discordgo.InteractionResponse) error); ok {
		r0 = rf(interaction, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InteractionResponse provides a mock function with given fields: interaction
func (_m *ISession) InteractionResponse(interaction *discordgo.Interaction) (*discordgo.Message, error) {
	ret := _m.Called(interaction)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction) *discordgo.Message); ok {
		r0 = rf(interaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.Interaction) error); ok {
		r1 = rf(interaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InteractionResponseDelete provides a mock function with given fields: interaction
func (_m *ISession) InteractionResponseDelete(interaction *discordgo.Interaction) error {
	ret := _m.Called(interaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction) error); ok {
		r0 = rf(interaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InteractionResponseEdit provides a mock function with given fields: interaction, newresp
func (_m *ISession) InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit) (*discordgo.Message, error) {
	ret := _m.Called(interaction, newresp)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(*discordgo.Interaction, *discordgo.WebhookEdit) *discordgo.Message); ok {
		r0 = rf(interaction, newresp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.Interaction, *discordgo.WebhookEdit) error); ok {
		r1 = rf(interaction, newresp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invite provides a mock function with given fields: inviteID
func (_m *ISession) Invite(inviteID string) (*discordgo.Invite, error) {
	ret := _m.Called(inviteID)

	var r0 *discordgo.Invite
	if rf, ok := ret.Get(0).(func(string) *discordgo.Invite); ok {
		r0 = rf(inviteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteAccept provides a mock function with given fields: inviteID
func (_m *ISession) InviteAccept(inviteID string) (*discordgo.Invite, error) {
	ret := _m.Called(inviteID)

	var r0 *discordgo.Invite
	if rf, ok := ret.Get(0).(func(string) *discordgo.Invite); ok {
		r0 = rf(inviteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteComplex provides a mock function with given fields: inviteID, guildScheduledEventID, withCounts, withExpiration
func (_m *ISession) InviteComplex(inviteID string, guildScheduledEventID string, withCounts bool, withExpiration bool) (*discordgo.Invite, error) {
	ret := _m.Called(inviteID, guildScheduledEventID, withCounts, withExpiration)

	var r0 *discordgo.Invite
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) *discordgo.Invite); ok {
		r0 = rf(inviteID, guildScheduledEventID, withCounts, withExpiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool) error); ok {
		r1 = rf(inviteID, guildScheduledEventID, withCounts, withExpiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteDelete provides a mock function with given fields: inviteID
func (_m *ISession) InviteDelete(inviteID string) (*discordgo.Invite, error) {
	ret := _m.Called(inviteID)

	var r0 *discordgo.Invite
	if rf, ok := ret.Get(0).(func(string) *discordgo.Invite); ok {
		r0 = rf(inviteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteWithCounts provides a mock function with given fields: inviteID
func (_m *ISession) InviteWithCounts(inviteID string) (*discordgo.Invite, error) {
	ret := _m.Called(inviteID)

	var r0 *discordgo.Invite
	if rf, ok := ret.Get(0).(func(string) *discordgo.Invite); ok {
		r0 = rf(inviteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageReactionAdd provides a mock function with given fields: channelID, messageID, emojiID
func (_m *ISession) MessageReactionAdd(channelID string, messageID string, emojiID string) error {
	ret := _m.Called(channelID, messageID, emojiID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(channelID, messageID, emojiID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageReactionRemove provides a mock function with given fields: channelID, messageID, emojiID, userID
func (_m *ISession) MessageReactionRemove(channelID string, messageID string, emojiID string, userID string) error {
	ret := _m.Called(channelID, messageID, emojiID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(channelID, messageID, emojiID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageReactions provides a mock function with given fields: channelID, messageID, emojiID, limit, beforeID, afterID
func (_m *ISession) MessageReactions(channelID string, messageID string, emojiID string, limit int, beforeID string, afterID string) ([]*discordgo.User, error) {
	ret := _m.Called(channelID, messageID, emojiID, limit, beforeID, afterID)

	var r0 []*discordgo.User
	if rf, ok := ret.Get(0).(func(string, string, string, int, string, string) []*discordgo.User); ok {
		r0 = rf(channelID, messageID, emojiID, limit, beforeID, afterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, string, string) error); ok {
		r1 = rf(channelID, messageID, emojiID, limit, beforeID, afterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageReactionsRemoveAll provides a mock function with given fields: channelID, messageID
func (_m *ISession) MessageReactionsRemoveAll(channelID string, messageID string) error {
	ret := _m.Called(channelID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageReactionsRemoveEmoji provides a mock function with given fields: channelID, messageID, emojiID
func (_m *ISession) MessageReactionsRemoveEmoji(channelID string, messageID string, emojiID string) error {
	ret := _m.Called(channelID, messageID, emojiID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(channelID, messageID, emojiID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageThreadStart provides a mock function with given fields: channelID, messageID, name, archiveDuration
func (_m *ISession) MessageThreadStart(channelID string, messageID string, name string, archiveDuration int) (*discordgo.Channel, error) {
	ret := _m.Called(channelID, messageID, name, archiveDuration)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, string, string, int) *discordgo.Channel); ok {
		r0 = rf(channelID, messageID, name, archiveDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int) error); ok {
		r1 = rf(channelID, messageID, name, archiveDuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageThreadStartComplex provides a mock function with given fields: channelID, messageID, data
func (_m *ISession) MessageThreadStartComplex(channelID string, messageID string, data *discordgo.ThreadStart) (*discordgo.Channel, error) {
	ret := _m.Called(channelID, messageID, data)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.ThreadStart) *discordgo.Channel); ok {
		r0 = rf(channelID, messageID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.ThreadStart) error); ok {
		r1 = rf(channelID, messageID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields:
func (_m *ISession) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields: method, urlStr, data
func (_m *ISession) Request(method string, urlStr string, data interface{}) ([]byte, error) {
	ret := _m.Called(method, urlStr, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, interface{}) []byte); ok {
		r0 = rf(method, urlStr, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(method, urlStr, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestGuildMembers provides a mock function with given fields: guildID, query, limit, nonce, presences
func (_m *ISession) RequestGuildMembers(guildID string, query string, limit int, nonce string, presences bool) error {
	ret := _m.Called(guildID, query, limit, nonce, presences)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, string, bool) error); ok {
		r0 = rf(guildID, query, limit, nonce, presences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestGuildMembersBatch provides a mock function with given fields: guildIDs, query, limit, nonce, presences
func (_m *ISession) RequestGuildMembersBatch(guildIDs []string, query string, limit int, nonce string, presences bool) error {
	ret := _m.Called(guildIDs, query, limit, nonce, presences)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, int, string, bool) error); ok {
		r0 = rf(guildIDs, query, limit, nonce, presences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestGuildMembersBatchList provides a mock function with given fields: guildIDs, userIDs, limit, nonce, presences
func (_m *ISession) RequestGuildMembersBatchList(guildIDs []string, userIDs []string, limit int, nonce string, presences bool) error {
	ret := _m.Called(guildIDs, userIDs, limit, nonce, presences)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, []string, int, string, bool) error); ok {
		r0 = rf(guildIDs, userIDs, limit, nonce, presences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestGuildMembersList provides a mock function with given fields: guildID, userIDs, limit, nonce, presences
func (_m *ISession) RequestGuildMembersList(guildID string, userIDs []string, limit int, nonce string, presences bool) error {
	ret := _m.Called(guildID, userIDs, limit, nonce, presences)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, int, string, bool) error); ok {
		r0 = rf(guildID, userIDs, limit, nonce, presences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestWithBucketID provides a mock function with given fields: method, urlStr, data, bucketID
func (_m *ISession) RequestWithBucketID(method string, urlStr string, data interface{}, bucketID string) ([]byte, error) {
	ret := _m.Called(method, urlStr, data, bucketID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) []byte); ok {
		r0 = rf(method, urlStr, data, bucketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, interface{}, string) error); ok {
		r1 = rf(method, urlStr, data, bucketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestWithLockedBucket provides a mock function with given fields: method, urlStr, contentType, b, bucket, sequence
func (_m *ISession) RequestWithLockedBucket(method string, urlStr string, contentType string, b []byte, bucket *discordgo.Bucket, sequence int) ([]byte, error) {
	ret := _m.Called(method, urlStr, contentType, b, bucket, sequence)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string, []byte, *discordgo.Bucket, int) []byte); ok {
		r0 = rf(method, urlStr, contentType, b, bucket, sequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []byte, *discordgo.Bucket, int) error); ok {
		r1 = rf(method, urlStr, contentType, b, bucket, sequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StageInstance provides a mock function with given fields: channelID
func (_m *ISession) StageInstance(channelID string) (*discordgo.StageInstance, error) {
	ret := _m.Called(channelID)

	var r0 *discordgo.StageInstance
	if rf, ok := ret.Get(0).(func(string) *discordgo.StageInstance); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.StageInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StageInstanceCreate provides a mock function with given fields: data
func (_m *ISession) StageInstanceCreate(data *discordgo.StageInstanceParams) (*discordgo.StageInstance, error) {
	ret := _m.Called(data)

	var r0 *discordgo.StageInstance
	if rf, ok := ret.Get(0).(func(*discordgo.StageInstanceParams) *discordgo.StageInstance); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.StageInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.StageInstanceParams) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StageInstanceDelete provides a mock function with given fields: channelID
func (_m *ISession) StageInstanceDelete(channelID string) error {
	ret := _m.Called(channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StageInstanceEdit provides a mock function with given fields: channelID, data
func (_m *ISession) StageInstanceEdit(channelID string, data *discordgo.StageInstanceParams) (*discordgo.StageInstance, error) {
	ret := _m.Called(channelID, data)

	var r0 *discordgo.StageInstance
	if rf, ok := ret.Get(0).(func(string, *discordgo.StageInstanceParams) *discordgo.StageInstance); ok {
		r0 = rf(channelID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.StageInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.StageInstanceParams) error); ok {
		r1 = rf(channelID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadJoin provides a mock function with given fields: id
func (_m *ISession) ThreadJoin(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThreadLeave provides a mock function with given fields: id
func (_m *ISession) ThreadLeave(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThreadMember provides a mock function with given fields: threadID, memberID
func (_m *ISession) ThreadMember(threadID string, memberID string) (*discordgo.ThreadMember, error) {
	ret := _m.Called(threadID, memberID)

	var r0 *discordgo.ThreadMember
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.ThreadMember); ok {
		r0 = rf(threadID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ThreadMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(threadID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadMemberAdd provides a mock function with given fields: threadID, memberID
func (_m *ISession) ThreadMemberAdd(threadID string, memberID string) error {
	ret := _m.Called(threadID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(threadID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThreadMemberRemove provides a mock function with given fields: threadID, memberID
func (_m *ISession) ThreadMemberRemove(threadID string, memberID string) error {
	ret := _m.Called(threadID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(threadID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThreadMembers provides a mock function with given fields: threadID
func (_m *ISession) ThreadMembers(threadID string) ([]*discordgo.ThreadMember, error) {
	ret := _m.Called(threadID)

	var r0 []*discordgo.ThreadMember
	if rf, ok := ret.Get(0).(func(string) []*discordgo.ThreadMember); ok {
		r0 = rf(threadID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.ThreadMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadStart provides a mock function with given fields: channelID, name, typ, archiveDuration
func (_m *ISession) ThreadStart(channelID string, name string, typ discordgo.ChannelType, archiveDuration int) (*discordgo.Channel, error) {
	ret := _m.Called(channelID, name, typ, archiveDuration)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, string, discordgo.ChannelType, int) *discordgo.Channel); ok {
		r0 = rf(channelID, name, typ, archiveDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, discordgo.ChannelType, int) error); ok {
		r1 = rf(channelID, name, typ, archiveDuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadStartComplex provides a mock function with given fields: channelID, data
func (_m *ISession) ThreadStartComplex(channelID string, data *discordgo.ThreadStart) (*discordgo.Channel, error) {
	ret := _m.Called(channelID, data)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string, *discordgo.ThreadStart) *discordgo.Channel); ok {
		r0 = rf(channelID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.ThreadStart) error); ok {
		r1 = rf(channelID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadsActive provides a mock function with given fields: channelID
func (_m *ISession) ThreadsActive(channelID string) (*discordgo.ThreadsList, error) {
	ret := _m.Called(channelID)

	var r0 *discordgo.ThreadsList
	if rf, ok := ret.Get(0).(func(string) *discordgo.ThreadsList); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ThreadsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadsArchived provides a mock function with given fields: channelID, before, limit
func (_m *ISession) ThreadsArchived(channelID string, before *time.Time, limit int) (*discordgo.ThreadsList, error) {
	ret := _m.Called(channelID, before, limit)

	var r0 *discordgo.ThreadsList
	if rf, ok := ret.Get(0).(func(string, *time.Time, int) *discordgo.ThreadsList); ok {
		r0 = rf(channelID, before, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ThreadsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *time.Time, int) error); ok {
		r1 = rf(channelID, before, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadsPrivateArchived provides a mock function with given fields: channelID, before, limit
func (_m *ISession) ThreadsPrivateArchived(channelID string, before *time.Time, limit int) (*discordgo.ThreadsList, error) {
	ret := _m.Called(channelID, before, limit)

	var r0 *discordgo.ThreadsList
	if rf, ok := ret.Get(0).(func(string, *time.Time, int) *discordgo.ThreadsList); ok {
		r0 = rf(channelID, before, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ThreadsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *time.Time, int) error); ok {
		r1 = rf(channelID, before, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThreadsPrivateJoinedArchived provides a mock function with given fields: channelID, before, limit
func (_m *ISession) ThreadsPrivateJoinedArchived(channelID string, before *time.Time, limit int) (*discordgo.ThreadsList, error) {
	ret := _m.Called(channelID, before, limit)

	var r0 *discordgo.ThreadsList
	if rf, ok := ret.Get(0).(func(string, *time.Time, int) *discordgo.ThreadsList); ok {
		r0 = rf(channelID, before, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.ThreadsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *time.Time, int) error); ok {
		r1 = rf(channelID, before, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGameStatus provides a mock function with given fields: idle, name
func (_m *ISession) UpdateGameStatus(idle int, name string) error {
	ret := _m.Called(idle, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(idle, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateListeningStatus provides a mock function with given fields: name
func (_m *ISession) UpdateListeningStatus(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusComplex provides a mock function with given fields: usd
func (_m *ISession) UpdateStatusComplex(usd discordgo.UpdateStatusData) error {
	ret := _m.Called(usd)

	var r0 error
	if rf, ok := ret.Get(0).(func(discordgo.UpdateStatusData) error); ok {
		r0 = rf(usd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStreamingStatus provides a mock function with given fields: idle, name, url
func (_m *ISession) UpdateStreamingStatus(idle int, name string, url string) error {
	ret := _m.Called(idle, name, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(idle, name, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User provides a mock function with given fields: userID
func (_m *ISession) User(userID string) (*discordgo.User, error) {
	ret := _m.Called(userID)

	var r0 *discordgo.User
	if rf, ok := ret.Get(0).(func(string) *discordgo.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAvatar provides a mock function with given fields: userID
func (_m *ISession) UserAvatar(userID string) (image.Image, error) {
	ret := _m.Called(userID)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(string) image.Image); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAvatarDecode provides a mock function with given fields: u
func (_m *ISession) UserAvatarDecode(u *discordgo.User) (image.Image, error) {
	ret := _m.Called(u)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(*discordgo.User) image.Image); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*discordgo.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserChannelCreate provides a mock function with given fields: recipientID
func (_m *ISession) UserChannelCreate(recipientID string) (*discordgo.Channel, error) {
	ret := _m.Called(recipientID)

	var r0 *discordgo.Channel
	if rf, ok := ret.Get(0).(func(string) *discordgo.Channel); ok {
		r0 = rf(recipientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(recipientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserChannelPermissions provides a mock function with given fields: userID, channelID
func (_m *ISession) UserChannelPermissions(userID string, channelID string) (int64, error) {
	ret := _m.Called(userID, channelID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(userID, channelID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserConnections provides a mock function with given fields:
func (_m *ISession) UserConnections() ([]*discordgo.UserConnection, error) {
	ret := _m.Called()

	var r0 []*discordgo.UserConnection
	if rf, ok := ret.Get(0).(func() []*discordgo.UserConnection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.UserConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGuildMember provides a mock function with given fields: guildID
func (_m *ISession) UserGuildMember(guildID string) (*discordgo.Member, error) {
	ret := _m.Called(guildID)

	var r0 *discordgo.Member
	if rf, ok := ret.Get(0).(func(string) *discordgo.Member); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGuilds provides a mock function with given fields: limit, beforeID, afterID
func (_m *ISession) UserGuilds(limit int, beforeID string, afterID string) ([]*discordgo.UserGuild, error) {
	ret := _m.Called(limit, beforeID, afterID)

	var r0 []*discordgo.UserGuild
	if rf, ok := ret.Get(0).(func(int, string, string) []*discordgo.UserGuild); ok {
		r0 = rf(limit, beforeID, afterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.UserGuild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(limit, beforeID, afterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpdate provides a mock function with given fields: username, avatar
func (_m *ISession) UserUpdate(username string, avatar string) (*discordgo.User, error) {
	ret := _m.Called(username, avatar)

	var r0 *discordgo.User
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.User); ok {
		r0 = rf(username, avatar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VoiceRegions provides a mock function with given fields:
func (_m *ISession) VoiceRegions() ([]*discordgo.VoiceRegion, error) {
	ret := _m.Called()

	var r0 []*discordgo.VoiceRegion
	if rf, ok := ret.Get(0).(func() []*discordgo.VoiceRegion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discordgo.VoiceRegion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Webhook provides a mock function with given fields: webhookID
func (_m *ISession) Webhook(webhookID string) (*discordgo.Webhook, error) {
	ret := _m.Called(webhookID)

	var r0 *discordgo.Webhook
	if rf, ok := ret.Get(0).(func(string) *discordgo.Webhook); ok {
		r0 = rf(webhookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(webhookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookCreate provides a mock function with given fields: channelID, name, avatar
func (_m *ISession) WebhookCreate(channelID string, name string, avatar string) (*discordgo.Webhook, error) {
	ret := _m.Called(channelID, name, avatar)

	var r0 *discordgo.Webhook
	if rf, ok := ret.Get(0).(func(string, string, string) *discordgo.Webhook); ok {
		r0 = rf(channelID, name, avatar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(channelID, name, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookDelete provides a mock function with given fields: webhookID
func (_m *ISession) WebhookDelete(webhookID string) error {
	ret := _m.Called(webhookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(webhookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookDeleteWithToken provides a mock function with given fields: webhookID, token
func (_m *ISession) WebhookDeleteWithToken(webhookID string, token string) (*discordgo.Webhook, error) {
	ret := _m.Called(webhookID, token)

	var r0 *discordgo.Webhook
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Webhook); ok {
		r0 = rf(webhookID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(webhookID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookEdit provides a mock function with given fields: webhookID, name, avatar, channelID
func (_m *ISession) WebhookEdit(webhookID string, name string, avatar string, channelID string) (*discordgo.Role, error) {
	ret := _m.Called(webhookID, name, avatar, channelID)

	var r0 *discordgo.Role
	if rf, ok := ret.Get(0).(func(string, string, string, string) *discordgo.Role); ok {
		r0 = rf(webhookID, name, avatar, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(webhookID, name, avatar, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookEditWithToken provides a mock function with given fields: webhookID, token, name, avatar
func (_m *ISession) WebhookEditWithToken(webhookID string, token string, name string, avatar string) (*discordgo.Role, error) {
	ret := _m.Called(webhookID, token, name, avatar)

	var r0 *discordgo.Role
	if rf, ok := ret.Get(0).(func(string, string, string, string) *discordgo.Role); ok {
		r0 = rf(webhookID, token, name, avatar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(webhookID, token, name, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookExecute provides a mock function with given fields: webhookID, token, wait, data
func (_m *ISession) WebhookExecute(webhookID string, token string, wait bool, data *discordgo.WebhookParams) (*discordgo.Message, error) {
	ret := _m.Called(webhookID, token, wait, data)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, bool, *discordgo.WebhookParams) *discordgo.Message); ok {
		r0 = rf(webhookID, token, wait, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, *discordgo.WebhookParams) error); ok {
		r1 = rf(webhookID, token, wait, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookMessage provides a mock function with given fields: webhookID, token, messageID
func (_m *ISession) WebhookMessage(webhookID string, token string, messageID string) (*discordgo.Message, error) {
	ret := _m.Called(webhookID, token, messageID)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, string) *discordgo.Message); ok {
		r0 = rf(webhookID, token, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(webhookID, token, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookMessageDelete provides a mock function with given fields: webhookID, token, messageID
func (_m *ISession) WebhookMessageDelete(webhookID string, token string, messageID string) error {
	ret := _m.Called(webhookID, token, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(webhookID, token, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookMessageEdit provides a mock function with given fields: webhookID, token, messageID, data
func (_m *ISession) WebhookMessageEdit(webhookID string, token string, messageID string, data *discordgo.WebhookEdit) (*discordgo.Message, error) {
	ret := _m.Called(webhookID, token, messageID, data)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, string, *discordgo.WebhookEdit) *discordgo.Message); ok {
		r0 = rf(webhookID, token, messageID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, *discordgo.WebhookEdit) error); ok {
		r1 = rf(webhookID, token, messageID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookThreadExecute provides a mock function with given fields: webhookID, token, wait, threadID, data
func (_m *ISession) WebhookThreadExecute(webhookID string, token string, wait bool, threadID string, data *discordgo.WebhookParams) (*discordgo.Message, error) {
	ret := _m.Called(webhookID, token, wait, threadID, data)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, bool, string, *discordgo.WebhookParams) *discordgo.Message); ok {
		r0 = rf(webhookID, token, wait, threadID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, string, *discordgo.WebhookParams) error); ok {
		r1 = rf(webhookID, token, wait, threadID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookWithToken provides a mock function with given fields: webhookID, token
func (_m *ISession) WebhookWithToken(webhookID string, token string) (*discordgo.Webhook, error) {
	ret := _m.Called(webhookID, token)

	var r0 *discordgo.Webhook
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Webhook); ok {
		r0 = rf(webhookID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(webhookID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISession interface {
	mock.TestingT
	Cleanup(func())
}

// NewISession creates a new instance of ISession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISession(t mockConstructorTestingTNewISession) *ISession {
	mock := &ISession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
